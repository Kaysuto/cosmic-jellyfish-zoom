import { execSync } from 'child_process';
import fs from 'fs-extra';
import path from 'path';

console.log('‚ö° V√©rification des performances...');

try {
  // V√©rifier que le build est √† jour
  if (!fs.existsSync('dist')) {
    console.log('üì¶ Build non trouv√©, construction en cours...');
    execSync('npm run build:optimized', { stdio: 'inherit' });
  }

  // Analyser la taille des bundles
  console.log('üìä Analyse des bundles...');
  
  const assetsDir = path.join('dist', 'assets');
  if (fs.existsSync(assetsDir)) {
    const files = fs.readdirSync(assetsDir);
    const jsFiles = files.filter(file => file.endsWith('.js'));
    const cssFiles = files.filter(file => file.endsWith('.css'));
    
    let totalJsSize = 0;
    let totalCssSize = 0;
    
    jsFiles.forEach(file => {
      const stats = fs.statSync(path.join(assetsDir, file));
      totalJsSize += stats.size;
      console.log(`   üìÑ ${file}: ${(stats.size / 1024).toFixed(1)} KB`);
    });
    
    cssFiles.forEach(file => {
      const stats = fs.statSync(path.join(assetsDir, file));
      totalCssSize += stats.size;
      console.log(`   üé® ${file}: ${(stats.size / 1024).toFixed(1)} KB`);
    });
    
    console.log(`\nüìà R√©sum√© des tailles:`);
    console.log(`   - JavaScript total: ${(totalJsSize / 1024).toFixed(1)} KB`);
    console.log(`   - CSS total: ${(totalCssSize / 1024).toFixed(1)} KB`);
    console.log(`   - Total: ${((totalJsSize + totalCssSize) / 1024).toFixed(1)} KB`);
    
    // Recommandations bas√©es sur la taille
    if (totalJsSize > 500 * 1024) {
      console.warn('‚ö†Ô∏è Bundle JavaScript trop volumineux (>500KB)');
      console.log('   üí° Recommandations:');
      console.log('      ‚Ä¢ Activer le code splitting');
      console.log('      ‚Ä¢ Utiliser le lazy loading');
      console.log('      ‚Ä¢ Optimiser les imports');
    }
    
    if (totalCssSize > 100 * 1024) {
      console.warn('‚ö†Ô∏è Bundle CSS trop volumineux (>100KB)');
      console.log('   üí° Recommandations:');
      console.log('      ‚Ä¢ Purger le CSS inutilis√©');
      console.log('      ‚Ä¢ Utiliser CSS-in-JS');
      console.log('      ‚Ä¢ Optimiser Tailwind CSS');
    }
  }

  // V√©rifier les ressources bloquantes
  console.log('\nüîç V√©rification des ressources bloquantes...');
  
  const htmlFile = path.join('dist', 'index.html');
  if (fs.existsSync(htmlFile)) {
    const htmlContent = fs.readFileSync(htmlFile, 'utf8');
    
    // V√©rifier les scripts synchrones
    const syncScripts = htmlContent.match(/<script[^>]*src[^>]*>/g);
    if (syncScripts) {
      console.log(`   üìú Scripts synchrones trouv√©s: ${syncScripts.length}`);
      syncScripts.forEach(script => {
        if (!script.includes('async') && !script.includes('defer')) {
          console.warn(`   ‚ö†Ô∏è Script bloquant: ${script}`);
        }
      });
    }
    
    // V√©rifier les CSS externes
    const externalCSS = htmlContent.match(/<link[^>]*rel="stylesheet"[^>]*>/g);
    if (externalCSS) {
      console.log(`   üé® CSS externes trouv√©s: ${externalCSS.length}`);
    }
  }

  // V√©rifier les images
  console.log('\nüñºÔ∏è V√©rification des images...');
  
  const imageDirs = ['public', 'src/assets'];
  let imageCount = 0;
  let totalImageSize = 0;
  
  imageDirs.forEach(dir => {
    if (fs.existsSync(dir)) {
      const files = fs.readdirSync(dir);
      files.forEach(file => {
        if (/\.(png|jpg|jpeg|gif|webp|avif)$/i.test(file)) {
          const stats = fs.statSync(path.join(dir, file));
          totalImageSize += stats.size;
          imageCount++;
          
          if (stats.size > 500 * 1024) {
            console.warn(`   ‚ö†Ô∏è Image volumineuse: ${file} (${(stats.size / 1024).toFixed(1)} KB)`);
          }
        }
      });
    }
  });
  
  console.log(`   üìä Images trouv√©es: ${imageCount}`);
  console.log(`   üìä Taille totale: ${(totalImageSize / 1024).toFixed(1)} KB`);

  // V√©rifier les chunks
  console.log('\nüì¶ V√©rification du code splitting...');
  
  if (fs.existsSync(assetsDir)) {
    const files = fs.readdirSync(assetsDir);
    const chunks = files.filter(file => file.includes('chunk') || file.includes('vendor'));
    
    if (chunks.length > 0) {
      console.log(`   ‚úÖ Code splitting actif: ${chunks.length} chunks`);
      chunks.forEach(chunk => {
        const stats = fs.statSync(path.join(assetsDir, chunk));
        console.log(`      üìÑ ${chunk}: ${(stats.size / 1024).toFixed(1)} KB`);
      });
    } else {
      console.warn('   ‚ö†Ô∏è Aucun chunk trouv√© - code splitting non optimis√©');
    }
  }

  // Recommandations g√©n√©rales
  console.log('\nüí° Recommandations de performance:');
  console.log('   ‚Ä¢ Utilisez npm run optimize-images pour optimiser les images');
  console.log('   ‚Ä¢ Activez la compression Gzip/Brotli sur le serveur');
  console.log('   ‚Ä¢ Utilisez un CDN pour les assets statiques');
  console.log('   ‚Ä¢ Impl√©mentez le service worker pour le cache');
  console.log('   ‚Ä¢ Optimisez les polices avec font-display: swap');
  console.log('   ‚Ä¢ Utilisez le composant OptimizedImage pour les images');
  
  console.log('\nüéâ V√©rification des performances termin√©e !');
  
} catch (error) {
  console.error('‚ùå Erreur lors de la v√©rification des performances:', error.message);
  process.exit(1);
}
