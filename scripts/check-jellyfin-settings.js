import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = "https://tgffkwoekuaetahrwioo.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRnZmZrd29la3VhZXRhaHJ3aW9vIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQzNzc5OTMsImV4cCI6MjA2OTk1Mzk5M30.2Or0n42Hc6OjdWL-oGwoQHMjPqTwg0yMGKXnEysiJP4";

const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

async function checkJellyfinSettings() {
  console.log('üîç V√©rification des param√®tres Jellyfin...\n');

  try {
    // D'abord, lister tous les enregistrements
    const { data: allSettings, error: listError } = await supabase
      .from('jellyfin_settings')
      .select('*');

    if (listError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des param√®tres:', listError.message);
      return;
    }

    console.log(`üìä Nombre d'enregistrements trouv√©s: ${allSettings.length}`);

    if (allSettings.length === 0) {
      console.log('‚ùå Aucun param√®tre Jellyfin trouv√© dans la base de donn√©es');
      console.log('üí° L\'enregistrement par d√©faut devrait √™tre cr√©√© automatiquement par les migrations');
      console.log('   V√©rifiez que les migrations ont √©t√© appliqu√©es correctement');
      return;
    }

    // Afficher tous les enregistrements
    allSettings.forEach((setting, index) => {
      console.log(`\nüìã Enregistrement ${index + 1}:`);
      console.log(`   ID: ${setting.id}`);
      console.log(`   URL: ${setting.url || '‚ùå Non configur√©'}`);
      console.log(`   API Key: ${setting.api_key ? '‚úÖ Configur√©' : '‚ùå Non configur√©'}`);
      console.log(`   Cr√©√© le: ${setting.created_at}`);
      console.log(`   Mis √† jour le: ${setting.updated_at}`);
    });

    // Chercher l'enregistrement avec id=1
    const settings = allSettings.find(s => s.id === 1);
    
    if (!settings) {
      console.log('\n‚ö†Ô∏è  Aucun enregistrement avec id=1 trouv√©');
      console.log('üí° La fonction jellyfin-auth cherche sp√©cifiquement l\'enregistrement avec id=1');
      return;
    }

    if (!settings.url || !settings.api_key) {
      console.log('\n‚ö†Ô∏è  Les param√®tres Jellyfin ne sont pas compl√®tement configur√©s');
      console.log('   Assurez-vous que l\'URL et la cl√© API sont d√©finis');
      console.log('\nüí° Pour configurer les param√®tres, utilisez l\'interface d\'administration');
      console.log('   ou mettez √† jour directement dans la base de donn√©es :');
      console.log(`   UPDATE jellyfin_settings SET url = 'votre_url_jellyfin', api_key = 'votre_cl√©_api' WHERE id = 1;`);
    } else {
      console.log('\n‚úÖ Configuration Jellyfin compl√®te');
      
      // Test de connectivit√©
      console.log('\nüîó Test de connectivit√© vers Jellyfin...');
      try {
        const response = await fetch(`${settings.url}/System/Info`, {
          headers: {
            'X-Emby-Token': settings.api_key,
          }
        });
        
        if (response.ok) {
          const systemInfo = await response.json();
          console.log('‚úÖ Connexion Jellyfin r√©ussie');
          console.log(`   Version: ${systemInfo.Version || 'Inconnue'}`);
          console.log(`   Nom du serveur: ${systemInfo.ServerName || 'Inconnu'}`);
        } else {
          console.log(`‚ùå Erreur de connexion Jellyfin: ${response.status} ${response.statusText}`);
        }
      } catch (fetchError) {
        console.log(`‚ùå Erreur de connectivit√©: ${fetchError.message}`);
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error.message);
  }
}

checkJellyfinSettings();
