import { createClient } from '@supabase/supabase-js';

// Configuration Supabase avec la cl√© service_role pour contourner RLS
const supabaseUrl = 'https://tgffkwoekuaetahrwioo.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå Variable SUPABASE_SERVICE_ROLE_KEY manquante');
  console.log('üí° Ajoute cette variable d\'environnement ou utilise le script SQL manuel');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function directJellyfinSetup() {
  try {
    console.log('üîß Configuration directe des param√®tres Jellyfin...\n');

    // Param√®tres Jellyfin
    const jellyfinUrl = 'https://playjelly.fr';
    const apiKey = '6ad7238735cd431c9384911bcdc3090c';

    console.log(`üìù Configuration :`);
    console.log(`URL: ${jellyfinUrl}`);
    console.log(`API Key: ${apiKey ? '***configur√©e***' : '‚ùå manquante'}`);

    // 1. V√©rifier et cr√©er la table jellyfin_settings
    console.log('\n1Ô∏è‚É£ V√©rification de la table jellyfin_settings...');
    
    const { error: createError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS public.jellyfin_settings (
          id INTEGER PRIMARY KEY DEFAULT 1,
          url TEXT NOT NULL DEFAULT '',
          api_key TEXT NOT NULL DEFAULT '',
          created_at TIMESTAMPTZ DEFAULT NOW(),
          updated_at TIMESTAMPTZ DEFAULT NOW()
        );
      `
    });

    if (createError) {
      console.log('‚ö†Ô∏è Erreur lors de la cr√©ation de la table (peut d√©j√† exister):', createError);
    } else {
      console.log('‚úÖ Table jellyfin_settings v√©rifi√©e');
    }

    // 2. Mettre √† jour les param√®tres Jellyfin
    console.log('\n2Ô∏è‚É£ Mise √† jour des param√®tres Jellyfin...');
    
    const { data: updateData, error: updateError } = await supabase
      .from('jellyfin_settings')
      .upsert({
        id: 1,
        url: jellyfinUrl,
        api_key: apiKey,
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'id'
      })
      .select();

    if (updateError) {
      console.log('‚ùå Erreur lors de la mise √† jour:', updateError);
    } else {
      console.log('‚úÖ Param√®tres Jellyfin mis √† jour avec succ√®s!');
      console.log('Donn√©es mises √† jour:', updateData);
    }

    // 3. V√©rifier les param√®tres
    console.log('\n3Ô∏è‚É£ V√©rification des param√®tres...');
    
    const { data: settings, error: settingsError } = await supabase
      .from('jellyfin_settings')
      .select('*')
      .eq('id', 1)
      .single();

    if (settingsError) {
      console.log('‚ùå Erreur lors de la v√©rification:', settingsError);
    } else {
      console.log('‚úÖ Param√®tres v√©rifi√©s:');
      console.log(`  - URL: ${settings.url}`);
      console.log(`  - API Key: ${settings.api_key ? '***configur√©e***' : '‚ùå manquante'}`);
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

directJellyfinSetup();
