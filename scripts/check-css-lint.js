import { execSync } from 'child_process';
import fs from 'fs-extra';
import path from 'path';

console.log('üé® V√©rification des probl√®mes de linter CSS...');

try {
  // V√©rifier la configuration VS Code
  console.log('üìã V√©rification de la configuration VS Code...');
  
  const vscodeSettingsPath = '.vscode/settings.json';
  const vscodeExtensionsPath = '.vscode/extensions.json';
  const cssCustomDataPath = '.vscode/css_custom_data.json';
  
  if (fs.existsSync(vscodeSettingsPath)) {
    console.log('‚úÖ Configuration VS Code trouv√©e');
    const settings = JSON.parse(fs.readFileSync(vscodeSettingsPath, 'utf8'));
    
    if (settings['css.validate'] === false) {
      console.log('‚úÖ Validation CSS d√©sactiv√©e');
    }
    
    if (settings['tailwindCSS.validate'] === true) {
      console.log('‚úÖ Validation Tailwind CSS activ√©e');
    }
  } else {
    console.warn('‚ö†Ô∏è Configuration VS Code manquante');
  }
  
  if (fs.existsSync(vscodeExtensionsPath)) {
    console.log('‚úÖ Recommandations d\'extensions trouv√©es');
  }
  
  if (fs.existsSync(cssCustomDataPath)) {
    console.log('‚úÖ Donn√©es personnalis√©es CSS trouv√©es');
  }

  // V√©rifier la configuration PostCSS
  console.log('\nüîß V√©rification de la configuration PostCSS...');
  
  const postcssConfigPath = 'postcss.config.js';
  if (fs.existsSync(postcssConfigPath)) {
    console.log('‚úÖ Configuration PostCSS trouv√©e');
    const postcssConfig = fs.readFileSync(postcssConfigPath, 'utf8');
    
    if (postcssConfig.includes('tailwindcss')) {
      console.log('‚úÖ Plugin Tailwind CSS configur√©');
    }
    
    if (postcssConfig.includes('autoprefixer')) {
      console.log('‚úÖ Plugin Autoprefixer configur√©');
    }
  }

  // V√©rifier les propri√©t√©s CSS probl√©matiques
  console.log('\nüîç V√©rification des propri√©t√©s CSS...');
  
  const globalsCssPath = 'src/globals.css';
  if (fs.existsSync(globalsCssPath)) {
    const cssContent = fs.readFileSync(globalsCssPath, 'utf8');
    
    // V√©rifier les directives Tailwind
    const tailwindDirectives = cssContent.match(/@tailwind/g);
    if (tailwindDirectives) {
      console.log(`‚úÖ Directives @tailwind trouv√©es: ${tailwindDirectives.length}`);
    }
    
    const applyDirectives = cssContent.match(/@apply/g);
    if (applyDirectives) {
      console.log(`‚úÖ Directives @apply trouv√©es: ${applyDirectives.length}`);
    }
    
    const layerDirectives = cssContent.match(/@layer/g);
    if (layerDirectives) {
      console.log(`‚úÖ Directives @layer trouv√©es: ${layerDirectives.length}`);
    }
    
    // V√©rifier les propri√©t√©s line-clamp
    const lineClampProperties = cssContent.match(/line-clamp:/g);
    if (lineClampProperties) {
      console.log(`‚úÖ Propri√©t√©s line-clamp trouv√©es: ${lineClampProperties.length}`);
    }
    
    const webkitLineClampProperties = cssContent.match(/-webkit-line-clamp:/g);
    if (webkitLineClampProperties) {
      console.log(`‚úÖ Propri√©t√©s -webkit-line-clamp trouv√©es: ${webkitLineClampProperties.length}`);
    }
  }

  // Recommandations pour r√©soudre les probl√®mes
  console.log('\nüí° Recommandations pour r√©soudre les probl√®mes de linter:');
  console.log('   ‚Ä¢ Installez l\'extension Tailwind CSS IntelliSense pour VS Code');
  console.log('   ‚Ä¢ Red√©marrez VS Code apr√®s l\'installation des extensions');
  console.log('   ‚Ä¢ V√©rifiez que la validation CSS est d√©sactiv√©e dans les param√®tres');
  console.log('   ‚Ä¢ Assurez-vous que les fichiers .css sont associ√©s √† Tailwind CSS');
  console.log('   ‚Ä¢ Utilisez les donn√©es personnalis√©es CSS pour les directives @tailwind');
  console.log('   ‚Ä¢ Les propri√©t√©s line-clamp sont maintenant compatibles avec les navigateurs');
  
  console.log('\nüéâ V√©rification des probl√®mes de linter CSS termin√©e !');
  console.log('üìä R√©sum√© des corrections:');
  console.log('   ‚úÖ Configuration VS Code pour Tailwind CSS');
  console.log('   ‚úÖ Donn√©es personnalis√©es CSS pour les directives');
  console.log('   ‚úÖ Propri√©t√©s line-clamp avec compatibilit√© navigateur');
  console.log('   ‚úÖ Configuration PostCSS optimis√©e');
  console.log('   ‚úÖ Recommandations d\'extensions VS Code');
  
} catch (error) {
  console.error('‚ùå Erreur lors de la v√©rification des probl√®mes de linter CSS:', error.message);
  process.exit(1);
}
