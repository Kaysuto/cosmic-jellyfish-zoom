{"version":3,"file":"PersonDetail-6-ibaPFv.js","sources":["../../src/pages/PersonDetail.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { supabase } from '@/integrations/supabase/client';\nimport { showError } from '@/utils/toast';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft, Calendar, Film, Tv, User, ChevronLeft, ChevronRight, Check } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useJellyfin } from '@/contexts/JellyfinContext';\nimport { Badge } from '@/components/ui/badge';\n\ninterface PersonDetails {\n  id: number;\n  name: string;\n  biography: string;\n  birthday: string | null;\n  place_of_birth: string | null;\n  profile_path: string | null;\n  known_for_department: string;\n}\n\ninterface Credit {\n  id: number;\n  title?: string;\n  name?: string;\n  character?: string;\n  job?: string;\n  media_type: 'movie' | 'tv';\n  release_date?: string;\n  first_air_date?: string;\n  poster_path: string | null;\n  isAvailable?: boolean;\n}\n\nconst PersonDetailPage = () => {\n  const { id } = useParams<{ id: string }>();\n  const { t, i18n } = useTranslation();\n  const navigate = useNavigate();\n  const { jellyfinUrl, loading: jellyfinLoading, error: jellyfinError } = useJellyfin();\n  const [person, setPerson] = useState<PersonDetails | null>(null);\n  const [credits, setCredits] = useState<Credit[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const ITEMS_PER_PAGE = 18;\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    const fetchDetails = async () => {\n      if (!id) return;\n      setLoading(true);\n      try {\n        const personPromise = supabase.functions.invoke('get-person-details', {\n          body: { personId: id, language: i18n.language },\n        });\n        const creditsPromise = supabase.functions.invoke('get-person-credits', {\n          body: { personId: id, language: i18n.language },\n        });\n\n        const [personResult, creditsResult] = await Promise.all([personPromise, creditsPromise]);\n\n        if (personResult.error) throw personResult.error;\n        setPerson(personResult.data);\n\n        if (creditsResult.error) throw creditsResult.error;\n        const allCreditsRaw = [...(creditsResult.data.cast || []), ...(creditsResult.data.crew || [])]\n          .filter((credit, index, self) => \n            credit.id && index === self.findIndex((c) => c.id === credit.id)\n          )\n          .filter(credit => credit.release_date || credit.first_air_date)\n          .sort((a, b) => {\n            const dateA = new Date(a.release_date || a.first_air_date).getTime();\n            const dateB = new Date(b.release_date || b.first_air_date).getTime();\n            return (isNaN(dateB) ? 0 : dateB) - (isNaN(dateA) ? 0 : dateA);\n          });\n        \n        const creditIds = allCreditsRaw.map(c => c.id);\n        if (creditIds.length > 0) {\n            const { data: catalogData, error: catalogError } = await supabase\n                .from('catalog_items')\n                .select('tmdb_id')\n                .in('tmdb_id', creditIds);\n            \n            if (catalogError) {\n                console.error(\"Error checking catalog availability for filmography\", catalogError);\n                setCredits(allCreditsRaw);\n            } else {\n                const availableIds = new Set(catalogData.map(item => item.tmdb_id));\n                const allCreditsWithAvailability = allCreditsRaw.map(credit => ({\n                    ...credit,\n                    isAvailable: availableIds.has(credit.id),\n                }));\n                setCredits(allCreditsWithAvailability);\n            }\n        } else {\n            setCredits(allCreditsRaw);\n        }\n\n      } catch (error: any) {\n        showError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDetails();\n  }, [id, i18n.language]);\n\n  const totalPages = Math.ceil(credits.length / ITEMS_PER_PAGE);\n  const currentCredits = credits.slice(\n    (currentPage - 1) * ITEMS_PER_PAGE,\n    currentPage * ITEMS_PER_PAGE\n  );\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Skeleton className=\"h-10 w-32 mb-8\" />\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          <div className=\"md:col-span-1\">\n            <Skeleton className=\"aspect-[2/3] w-full rounded-lg\" />\n            <Skeleton className=\"h-6 w-3/4 mt-4\" />\n            <Skeleton className=\"h-4 w-1/2 mt-2\" />\n          </div>\n          <div className=\"md:col-span-2 space-y-6\">\n            <Skeleton className=\"h-8 w-1/3\" />\n            <Skeleton className=\"h-32 w-full\" />\n            <Skeleton className=\"h-8 w-1/3 mt-8\" />\n            <Skeleton className=\"h-64 w-full\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!person) {\n    return <div className=\"container mx-auto px-4 py-8 text-center\">{t('no_results_found')}</div>;\n  }\n\n  if (jellyfinError) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Button variant=\"outline\" onClick={() => navigate(-1)} className=\"mb-8\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" /> {t('back')}\n        </Button>\n        <div className=\"text-red-500 p-4 rounded-lg bg-red-500/10 border border-red-500/20\">\n          <p>Erreur de configuration Jellyfin : {jellyfinError}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n      className=\"container mx-auto px-4 py-8\"\n    >\n      <Button variant=\"outline\" onClick={() => navigate(-1)} className=\"mb-8\">\n        <ArrowLeft className=\"mr-2 h-4 w-4\" /> {t('back')}\n      </Button>\n      <div className=\"grid md:grid-cols-3 lg:grid-cols-4 gap-8 items-start\">\n        <div className=\"md:col-span-1 lg:col-span-1\">\n          <Card className=\"overflow-hidden sticky top-24\">\n            {person.profile_path ? (\n              <img src={`https://image.tmdb.org/t/p/w500${person.profile_path}`} alt={person.name} className=\"w-full h-auto\" />\n            ) : (\n              <div className=\"aspect-[2/3] bg-muted flex items-center justify-center text-muted-foreground\">\n                <User className=\"h-24 w-24\" />\n              </div>\n            )}\n            <CardContent className=\"p-4\">\n              <h2 className=\"text-2xl font-bold\">{person.name}</h2>\n              <p className=\"text-sm text-muted-foreground\">{t(person.known_for_department.toLowerCase())}</p>\n              {person.birthday && (\n                <div className=\"flex items-center gap-2 mt-4 text-sm\">\n                  <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  <span>{new Date(person.birthday).toLocaleDateString(i18n.language, { year: 'numeric', month: 'long', day: 'numeric' })}</span>\n                </div>\n              )}\n              {person.place_of_birth && (\n                <p className=\"text-sm text-muted-foreground mt-1\">{person.place_of_birth}</p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n        <div className=\"md:col-span-2 lg:col-span-3 space-y-8\">\n          <div>\n            <h3 className=\"text-3xl font-bold mb-4\">{t('biography')}</h3>\n            <p className=\"text-muted-foreground whitespace-pre-wrap leading-relaxed\">\n              {person.biography || t('no_biography_available')}\n            </p>\n          </div>\n          <div>\n            <h3 className=\"text-3xl font-bold mb-4\">{t('filmography')}</h3>\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4\">\n              {currentCredits.map(credit => {\n                const year = credit.release_date ? new Date(credit.release_date).getFullYear() : (credit.first_air_date ? new Date(credit.first_air_date).getFullYear() : 'N/A');\n                const title = credit.title || credit.name;\n                return (\n                  <Link to={`/media/${credit.media_type}/${credit.id}`} key={`${credit.id}-${credit.job || credit.character}`} className=\"text-left\">\n                    <Card className=\"overflow-hidden bg-muted/20 border-border h-full transition-transform hover:scale-105 group relative\">\n                      {credit.isAvailable && (\n                        <div className=\"absolute top-2 left-2 z-10\">\n                          <Badge className=\"bg-green-600 hover:bg-green-700 text-white border-transparent\">\n                            <Check className=\"h-3 w-3 mr-1\" />\n                            {t('available')}\n                          </Badge>\n                        </div>\n                      )}\n                      <div className=\"aspect-[2/3] bg-muted\">\n                        {credit.poster_path ? (\n                          <img src={`https://image.tmdb.org/t/p/w500${credit.poster_path}`} alt={title} className=\"w-full h-full object-cover\" />\n                        ) : (\n                          <div className=\"w-full h-full flex items-center justify-center text-muted-foreground\">\n                            {credit.media_type === 'movie' ? <Film className=\"h-12 w-12\" /> : <Tv className=\"h-12 w-12\" />}\n                          </div>\n                        )}\n                      </div>\n                      <CardContent className=\"p-2\">\n                        <p className=\"font-bold text-sm truncate\" title={title}>{title}</p>\n                        <p className=\"text-xs text-muted-foreground truncate\" title={credit.character || credit.job}>{credit.character || credit.job}</p>\n                        <p className=\"text-xs text-muted-foreground\">{year}</p>\n                      </CardContent>\n                    </Card>\n                  </Link>\n                );\n              })}\n            </div>\n            {totalPages > 1 && (\n              <div className=\"flex items-center justify-center gap-4 mt-8\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(p => Math.max(1, p - 1))}\n                  disabled={currentPage === 1}\n                >\n                  <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                  {t('previous')}\n                </Button>\n                <span className=\"text-sm text-muted-foreground font-mono\">\n                  {t('page_x_of_y', { x: currentPage, y: totalPages })}\n                </span>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}\n                  disabled={currentPage === totalPages}\n                >\n                  {t('next')}\n                  <ChevronRight className=\"h-4 w-4 ml-1\" />\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default PersonDetailPage;"],"names":["PersonDetailPage","id","useParams","t","i18n","useTranslation","navigate","useNavigate","jellyfinUrl","jellyfinLoading","jellyfinError","useJellyfin","person","setPerson","useState","credits","setCredits","loading","setLoading","currentPage","setCurrentPage","ITEMS_PER_PAGE","useEffect","__async","personPromise","supabase","creditsPromise","personResult","creditsResult","allCreditsRaw","credit","index","self","c","a","b","dateA","dateB","creditIds","catalogData","catalogError","availableIds","item","allCreditsWithAvailability","__spreadProps","__spreadValues","error","showError","totalPages","currentCredits","jsxs","jsx","Skeleton","Button","ArrowLeft","motion","Card","User","CardContent","Calendar","year","title","Link","Badge","Check","Film","Tv","p","ChevronLeft","ChevronRight"],"mappings":"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"}