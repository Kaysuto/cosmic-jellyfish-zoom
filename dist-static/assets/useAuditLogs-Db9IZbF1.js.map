{"version":3,"file":"useAuditLogs-Db9IZbF1.js","sources":["../../src/hooks/useAuditLogs.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { RealtimeChannel } from '@supabase/supabase-js';\n\nexport interface AuditLog {\n  id: string;\n  created_at: string;\n  user_id: string | null;\n  action: string;\n  details: any;\n  profiles: { email: string | null, first_name: string | null, last_name: string | null } | null;\n}\n\nexport const useAuditLogs = (page: number, perPage: number) => {\n  const [logs, setLogs] = useState<AuditLog[]>([]);\n  const [totalCount, setTotalCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchLogs = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    const from = (page - 1) * perPage;\n    const to = from + perPage - 1;\n\n    const { data, error: fetchError, count } = await supabase\n      .from('audit_logs')\n      .select('*, profiles(*)', { count: 'exact' })\n      .order('created_at', { ascending: false })\n      .range(from, to);\n    \n    if (fetchError) {\n      console.error('Error fetching audit logs:', fetchError);\n      setError(fetchError.message);\n      setLogs([]);\n      setTotalCount(0);\n    } else {\n      setLogs(data as any[] || []);\n      setTotalCount(count || 0);\n    }\n    setLoading(false);\n  }, [page, perPage]);\n\n  useEffect(() => {\n    fetchLogs();\n\n    const channel: RealtimeChannel = supabase\n      .channel('audit-logs-changes')\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'audit_logs',\n        },\n        () => {\n          fetchLogs();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [fetchLogs]);\n\n  return { logs, loading, error, totalCount, refreshLogs: fetchLogs };\n};"],"names":["useAuditLogs","page","perPage","logs","setLogs","useState","totalCount","setTotalCount","loading","setLoading","error","setError","fetchLogs","useCallback","__async","from","to","data","fetchError","count","supabase","useEffect","channel"],"mappings":"yRAaO,MAAMA,EAAe,CAACC,EAAcC,IAAoB,CAC7D,KAAM,CAACC,EAAMC,CAAO,EAAIC,EAAAA,SAAqB,CAAA,CAAE,EACzC,CAACC,EAAYC,CAAa,EAAIF,EAAAA,SAAS,CAAC,EACxC,CAACG,EAASC,CAAU,EAAIJ,EAAAA,SAAS,EAAI,EACrC,CAACK,EAAOC,CAAQ,EAAIN,EAAAA,SAAwB,IAAI,EAEhDO,EAAYC,EAAAA,YAAY,IAAYC,EAAA,sBACxCL,EAAW,EAAI,EACfE,EAAS,IAAI,EAEb,MAAMI,GAAQd,EAAO,GAAKC,EACpBc,EAAKD,EAAOb,EAAU,EAEtB,CAAE,KAAAe,EAAM,MAAOC,EAAY,MAAAC,CAAA,EAAU,MAAMC,EAC9C,KAAK,YAAY,EACjB,OAAO,iBAAkB,CAAE,MAAO,OAAA,CAAS,EAC3C,MAAM,aAAc,CAAE,UAAW,GAAO,EACxC,MAAML,EAAMC,CAAE,EAEbE,GACF,QAAQ,MAAM,6BAA8BA,CAAU,EACtDP,EAASO,EAAW,OAAO,EAC3Bd,EAAQ,CAAA,CAAE,EACVG,EAAc,CAAC,IAEfH,EAAQa,GAAiB,EAAE,EAC3BV,EAAcY,GAAS,CAAC,GAE1BV,EAAW,EAAK,CAClB,GAAG,CAACR,EAAMC,CAAO,CAAC,EAElBmB,OAAAA,EAAAA,UAAU,IAAM,CACdT,EAAA,EAEA,MAAMU,EAA2BF,EAC9B,QAAQ,oBAAoB,EAC5B,GACC,mBACA,CACE,MAAO,IACP,OAAQ,SACR,MAAO,YAAA,EAET,IAAM,CACJR,EAAA,CACF,CAAA,EAED,UAAA,EAEH,MAAO,IAAM,CACXQ,EAAS,cAAcE,CAAO,CAChC,CACF,EAAG,CAACV,CAAS,CAAC,EAEP,CAAE,KAAAT,EAAM,QAAAK,EAAS,MAAAE,EAAO,WAAAJ,EAAY,YAAaM,CAAA,CAC1D"}