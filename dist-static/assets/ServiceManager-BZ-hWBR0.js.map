{"version":3,"file":"ServiceManager-BZ-hWBR0.js","sources":["../../src/components/admin/ServiceForm.tsx","../../src/components/admin/ServiceManager.tsx"],"sourcesContent":["import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@/components/ui/button';\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Service } from '@/hooks/useServices';\n\nconst serviceSchema = z.object({\n  name: z.string().min(1, { message: 'Le nom est requis' }),\n  description: z.string().optional(),\n  url: z.string().url({ message: \"L'URL n'est pas valide\" }).optional().or(z.literal('')),\n  ip_address: z.string().optional().nullable(),\n  port: z.preprocess(\n    (val) => (val === \"\" || val === null || val === undefined ? undefined : Number(val)),\n    z.number({ invalid_type_error: \"Le port doit être un nombre.\" })\n      .positive({ message: \"Le port doit être un nombre positif.\" })\n      .int()\n      .min(1, \"Le port doit être supérieur à 0.\")\n      .max(65535, \"Le port doit être inférieur à 65536.\")\n      .optional()\n  ),\n}).refine(data => !!data.ip_address === !!data.port, {\n    message: \"L'adresse IP et le port doivent être fournis ensemble, ou aucun des deux.\",\n    path: [\"port\"],\n});\n\nexport type ServiceFormValues = z.infer<typeof serviceSchema>;\n\ninterface ServiceFormProps {\n  service?: Service | null;\n  onSubmit: (values: ServiceFormValues) => void;\n  onCancel: () => void;\n  isSubmitting: boolean;\n}\n\nconst ServiceForm = ({ service, onSubmit, onCancel, isSubmitting }: ServiceFormProps) => {\n  const { t } = useTranslation();\n\n  const form = useForm<ServiceFormValues>({\n    resolver: zodResolver(serviceSchema),\n    defaultValues: {\n      name: service?.name || '',\n      description: service?.description || '',\n      url: service?.url || '',\n      ip_address: service?.ip_address || null,\n      port: service?.port || undefined,\n    },\n  });\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>{t('title')}</FormLabel>\n              <FormControl>\n                <Input {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>{t('description')}</FormLabel>\n              <FormControl>\n                <Textarea {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"url\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>URL de surveillance</FormLabel>\n              <FormControl>\n                <Input {...field} placeholder=\"https://example.com\" />\n              </FormControl>\n              <FormMessage />\n              <p className=\"text-xs text-muted-foreground\">\n                Laissez vide si le service n'a pas d'URL à surveiller. Le statut sera défini sur \"En maintenance\".\n              </p>\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"ip_address\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Adresse IP (Optionnel)</FormLabel>\n              <FormControl>\n                <Input {...field} value={field.value || ''} placeholder=\"123.45.67.89\" />\n              </FormControl>\n              <FormDescription>\n                IP du serveur d'origine pour contourner Cloudflare pour les vérifications.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"port\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Port (Optionnel)</FormLabel>\n              <FormControl>\n                <Input {...field} value={field.value ?? ''} onChange={field.onChange} placeholder=\"443\" />\n              </FormControl>\n              <FormDescription>\n                Port du serveur d'origine. Doit être utilisé avec l'adresse IP.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <div className=\"flex justify-end gap-2 pt-4\">\n          <Button type=\"button\" variant=\"ghost\" onClick={onCancel} disabled={isSubmitting}>\n            {t('cancel')}\n          </Button>\n          <Button type=\"submit\" disabled={isSubmitting}>\n            {isSubmitting ? t('saving') : t('save')}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n};\n\nexport default ServiceForm;","import { useState } from 'react';\nimport { useServices, Service } from '@/hooks/useServices';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { PlusCircle, Edit, Trash2, MoreHorizontal, ChevronUp, ChevronDown, Zap } from 'lucide-react';\nimport ServiceForm, { ServiceFormValues } from './ServiceForm';\nimport { showSuccess, showError, showLoading, dismissToast } from '@/utils/toast';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from '@/components/ui/dialog';\nimport { cn } from '@/lib/utils';\nimport { useSession } from '@/contexts/AuthContext';\nimport { motion } from 'framer-motion';\n\nconst ServiceManager = () => {\n  const { t } = useTranslation();\n  const { services, loading, refreshServices } = useServices();\n  const { session } = useSession();\n  const [isSheetOpen, setIsSheetOpen] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [selectedService, setSelectedService] = useState<Service | null>(null);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [serviceToDelete, setServiceToDelete] = useState<string | null>(null);\n\n  const handleImmediateCheck = async (serviceId: string) => {\n    const toastId = showLoading(t('checking_status_now'));\n    try {\n      const { error } = await supabase.functions.invoke('immediate-health-check', {\n        body: { service_id: serviceId },\n      });\n      if (error) throw error;\n      showSuccess(t('check_complete_status_soon'));\n      setTimeout(refreshServices, 2000);\n    } catch (error: any) {\n      showError(`${t('error_during_check')}: ${error.message}`);\n    } finally {\n      dismissToast(toastId);\n    }\n  };\n\n  const statusConfig = {\n    operational: { text: t('operational'), className: 'bg-green-500/20 text-green-500 border-green-500/30' },\n    degraded: { text: t('degraded'), className: 'bg-yellow-500/20 text-yellow-500 border-yellow-500/30' },\n    downtime: { text: t('downtime'), className: 'bg-red-500/20 text-red-500 border-red-500/30' },\n    maintenance: { text: 'En maintenance', className: 'bg-gray-500/20 text-gray-500 border-gray-500/30' },\n  };\n\n  const handleReorder = async (index: number, direction: 'up' | 'down') => {\n    const serviceToMove = services[index];\n    const swapIndex = direction === 'up' ? index - 1 : index + 1;\n    const serviceToSwap = services[swapIndex];\n\n    if (!serviceToMove || !serviceToSwap) return;\n\n    const { error } = await supabase.rpc('swap_service_positions', {\n      service_id_1: serviceToMove.id,\n      service_id_2: serviceToSwap.id,\n    });\n\n    if (error) {\n      showError(\"Erreur lors de la réorganisation.\");\n    } else {\n      refreshServices();\n    }\n  };\n\n  const handleFormSubmit = async (values: ServiceFormValues) => {\n    setIsSubmitting(true);\n    \n    const hasUrl = values.url && values.url.trim() !== '';\n    const serviceData = {\n      ...values,\n      url: hasUrl ? values.url : null,\n      status: selectedService ? selectedService.status : (hasUrl ? 'operational' : 'maintenance'),\n      updated_at: new Date().toISOString(),\n      position: selectedService ? selectedService.position : (services.length > 0 ? Math.max(...services.map(s => s.position)) + 1 : 1),\n    };\n\n    if (selectedService) {\n      const { error } = await supabase.from('services').update(serviceData).eq('id', selectedService.id);\n      if (error) {\n        showError(t('error_saving_service'));\n      } else {\n        showSuccess(t('service_saved_successfully'));\n        if (session?.user.id) {\n          await supabase.from('audit_logs').insert({ user_id: session.user.id, action: 'service_updated', details: { service_id: selectedService.id, name: values.name } });\n        }\n        refreshServices();\n      }\n    } else {\n      const { data, error } = await supabase.from('services').insert(serviceData).select().single();\n      if (error) {\n        showError(t('error_saving_service'));\n      } else {\n        showSuccess(t('service_saved_successfully'));\n        if (data && session?.user.id) {\n          await supabase.from('audit_logs').insert({ user_id: session.user.id, action: 'service_created', details: { service_id: data.id, name: values.name } });\n        }\n        refreshServices();\n      }\n    }\n\n    setIsSheetOpen(false);\n    setSelectedService(null);\n    setIsSubmitting(false);\n  };\n\n  const confirmDelete = (serviceId: string) => {\n    setServiceToDelete(serviceId);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const handleDelete = async () => {\n    if (!serviceToDelete) return;\n    \n    const serviceName = services.find(s => s.id === serviceToDelete)?.name;\n    const { error } = await supabase.from('services').delete().eq('id', serviceToDelete);\n    \n    if (error) {\n      showError(t('error_deleting_service'));\n    } else {\n      showSuccess(t('service_deleted_successfully'));\n      if (session?.user.id) {\n        await supabase.from('audit_logs').insert({ user_id: session.user.id, action: 'service_deleted', details: { service_id: serviceToDelete, name: serviceName } });\n      }\n      refreshServices();\n    }\n    \n    setIsDeleteDialogOpen(false);\n    setServiceToDelete(null);\n  };\n\n  const openCreateForm = () => {\n    setSelectedService(null);\n    setIsSheetOpen(true);\n  };\n\n  const openEditForm = (service: Service) => {\n    setSelectedService(service);\n    setIsSheetOpen(true);\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader><Skeleton className=\"h-8 w-48\" /></CardHeader>\n        <CardContent><Skeleton className=\"h-64 w-full\" /></CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5, ease: \"easeInOut\" }}\n    >\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>{t('manage_services')}</CardTitle>\n          <Button onClick={openCreateForm}>\n            <PlusCircle className=\"mr-2 h-4 w-4\" />\n            {t('create_service')}\n          </Button>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-[60px]\">Ordre</TableHead>\n                <TableHead>{t('service')}</TableHead>\n                <TableHead>{t('status')}</TableHead>\n                <TableHead>URL</TableHead>\n                <TableHead className=\"text-right\">{t('actions')}</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {services.map((service, index) => (\n                <TableRow key={service.id}>\n                  <TableCell>\n                    <div className=\"flex flex-col items-center\">\n                      <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\" onClick={() => handleReorder(index, 'up')} disabled={index === 0}>\n                        <ChevronUp className=\"h-4 w-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\" onClick={() => handleReorder(index, 'down')} disabled={index === services.length - 1}>\n                        <ChevronDown className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"font-medium\">{t(service.name.toLowerCase().replace(/ /g, '_'))}</div>\n                    <div className=\"text-sm text-muted-foreground\">{service.description}</div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\" className={cn('border', statusConfig[service.status as keyof typeof statusConfig]?.className || statusConfig.maintenance.className)}>\n                      {statusConfig[service.status as keyof typeof statusConfig]?.text || statusConfig.maintenance.text}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    {service.url ? (\n                      <span className=\"text-xs text-green-600\">✓ Surveillé</span>\n                    ) : (\n                      <span className=\"text-xs text-gray-500\">Non surveillé</span>\n                    )}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <DropdownMenu modal={false}>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\">\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem onClick={() => openEditForm(service)}>\n                          <Edit className=\"mr-2 h-4 w-4\" />\n                          <span>{t('edit')}</span>\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => handleImmediateCheck(service.id)} disabled={!service.url}>\n                          <Zap className=\"mr-2 h-4 w-4\" />\n                          <span>{t('check_status')}</span>\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => confirmDelete(service.id)} className=\"text-destructive\">\n                          <Trash2 className=\"mr-2 h-4 w-4\" />\n                          <span>{t('delete')}</span>\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      <Dialog open={isSheetOpen} onOpenChange={setIsSheetOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>\n              {selectedService ? t('edit_service') : t('create_service')}\n            </DialogTitle>\n            <DialogDescription>\n              {selectedService\n                ? t('edit_service_desc')\n                : t('create_service_desc')}\n            </DialogDescription>\n          </DialogHeader>\n          <ServiceForm\n            service={selectedService}\n            onSubmit={handleFormSubmit}\n            onCancel={() => setIsSheetOpen(false)}\n            isSubmitting={isSubmitting}\n          />\n        </DialogContent>\n      </Dialog>\n\n      <AlertDialog\n        open={isDeleteDialogOpen}\n        onOpenChange={setIsDeleteDialogOpen}\n      >\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>{t('confirm_delete_title')}</AlertDialogTitle>\n            <AlertDialogDescription>{t('confirm_delete_service')}</AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={() => setServiceToDelete(null)}>{t('cancel')}</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete} className=\"bg-destructive hover:bg-destructive/90\">\n              {t('delete')}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </motion.div>\n  );\n};\n\nexport default ServiceManager;"],"names":["serviceSchema","z.object","z.string","z.literal","z.preprocess","val","z.number","data","ServiceForm","service","onSubmit","onCancel","isSubmitting","t$1","useTranslation","form","useForm","zodResolver","jsx","Form","__spreadProps","__spreadValues","jsxs","FormField","field","FormItem","FormLabel","t","FormControl","Input","FormMessage","Textarea","FormDescription","_a","Button","ServiceManager","services","loading","refreshServices","useServices","session","useSession","isSheetOpen","setIsSheetOpen","useState","setIsSubmitting","selectedService","setSelectedService","isDeleteDialogOpen","setIsDeleteDialogOpen","serviceToDelete","setServiceToDelete","handleImmediateCheck","serviceId","__async","toastId","showLoading","error","supabase","showSuccess","showError","dismissToast","statusConfig","handleReorder","index","direction","serviceToMove","swapIndex","serviceToSwap","handleFormSubmit","values","hasUrl","serviceData","s","confirmDelete","handleDelete","serviceName","openCreateForm","openEditForm","Card","CardHeader","Skeleton","CardContent","motion","CardTitle","PlusCircle","Table","TableHeader","TableRow","TableHead","TableBody","TableCell","ChevronUp","ChevronDown","Badge","cn","_b","DropdownMenu","DropdownMenuTrigger","MoreHorizontal","DropdownMenuContent","DropdownMenuItem","Edit","Zap","Trash2","Dialog","DialogContent","DialogHeader","DialogTitle","DialogDescription","AlertDialog","AlertDialogContent","AlertDialogHeader","AlertDialogTitle","AlertDialogDescription","AlertDialogFooter","AlertDialogCancel","AlertDialogAction"],"mappings":"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"}