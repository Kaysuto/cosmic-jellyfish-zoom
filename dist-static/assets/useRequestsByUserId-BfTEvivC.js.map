{"version":3,"file":"useRequestsByUserId-BfTEvivC.js","sources":["../../src/hooks/useRequestsByUserId.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\n\nexport interface UserMediaRequest {\n  id: string;\n  title: string;\n  status: 'pending' | 'approved' | 'rejected' | 'available';\n  requested_at: string;\n  media_type: 'movie' | 'tv' | 'anime';\n  poster_path: string | null;\n  tmdb_id: number;\n}\n\nexport const useRequestsByUserId = (userId: string | undefined) => {\n  const [requests, setRequests] = useState<UserMediaRequest[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const fetchRequests = useCallback(async () => {\n    if (!userId) {\n      setLoading(false);\n      return;\n    }\n    setLoading(true);\n    const { data, error } = await supabase\n      .from('media_requests')\n      .select('id, title, status, requested_at, media_type, poster_path, tmdb_id')\n      .eq('user_id', userId)\n      .order('requested_at', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching user requests:', error);\n      setRequests([]);\n    } else {\n      setRequests(data as UserMediaRequest[]);\n    }\n    setLoading(false);\n  }, [userId]);\n\n  useEffect(() => {\n    if (!userId) {\n      setRequests([]);\n      setLoading(false);\n      return;\n    }\n\n    fetchRequests();\n\n    const channel = supabase\n      .channel(`user-requests-${userId}`)\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'media_requests',\n          filter: `user_id=eq.${userId}`\n        },\n        (payload) => {\n          console.log('Change received!', payload);\n          fetchRequests(); // Re-fetch all requests on any change for simplicity\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [userId, fetchRequests]);\n\n  return { requests, loading, refreshRequests: fetchRequests };\n};"],"names":["useRequestsByUserId","userId","requests","setRequests","useState","loading","setLoading","fetchRequests","useCallback","__async","data","error","supabase","useEffect","channel","payload"],"mappings":"8RAaO,MAAMA,EAAuBC,GAA+B,CACjE,KAAM,CAACC,EAAUC,CAAW,EAAIC,EAAAA,SAA6B,CAAA,CAAE,EACzD,CAACC,EAASC,CAAU,EAAIF,EAAAA,SAAS,EAAI,EAErCG,EAAgBC,EAAAA,YAAY,IAAYC,EAAA,sBAC5C,GAAI,CAACR,EAAQ,CACXK,EAAW,EAAK,EAChB,MACF,CACAA,EAAW,EAAI,EACf,KAAM,CAAE,KAAAI,EAAM,MAAAC,GAAU,MAAMC,EAC3B,KAAK,gBAAgB,EACrB,OAAO,mEAAmE,EAC1E,GAAG,UAAWX,CAAM,EACpB,MAAM,eAAgB,CAAE,UAAW,GAAO,EAEzCU,GACF,QAAQ,MAAM,gCAAiCA,CAAK,EACpDR,EAAY,CAAA,CAAE,GAEdA,EAAYO,CAA0B,EAExCJ,EAAW,EAAK,CAClB,GAAG,CAACL,CAAM,CAAC,EAEXY,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAI,CAACZ,EAAQ,CACXE,EAAY,CAAA,CAAE,EACdG,EAAW,EAAK,EAChB,MACF,CAEAC,EAAA,EAEA,MAAMO,EAAUF,EACb,QAAQ,iBAAiBX,CAAM,EAAE,EACjC,GACC,mBACA,CACE,MAAO,IACP,OAAQ,SACR,MAAO,iBACP,OAAQ,cAAcA,CAAM,EAAA,EAE7Bc,GAAY,CACX,QAAQ,IAAI,mBAAoBA,CAAO,EACvCR,EAAA,CACF,CAAA,EAED,UAAA,EAEH,MAAO,IAAM,CACXK,EAAS,cAAcE,CAAO,CAChC,CACF,EAAG,CAACb,EAAQM,CAAa,CAAC,EAEnB,CAAE,SAAAL,EAAU,QAAAG,EAAS,gBAAiBE,CAAA,CAC/C"}